version: "3"

services:
  app:
    build:
      context: .
      dockerfile: docker/prod.Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - AWS_REGION=ap-northeast-1
      - AWS_SECRET_MANAGER_ENABLED=true
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/app.log
      - AUDIT_LOG_FILE=/app/logs/audit.log
    volumes:
      - app_logs:/app/logs
    depends_on:
      - postgres
    networks:
      - mcp-network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-mcp_client}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mcp-network
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 本番環境用のロードバランサー
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/conf:/etc/nginx/conf.d
      - ./docker/nginx/certs:/etc/nginx/certs
    depends_on:
      - app
    networks:
      - mcp-network
    deploy:
      restart_policy:
        condition: on-failure

  # 本番環境用のログ収集
  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.0
    volumes:
      - app_logs:/logs
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - mcp-network
    depends_on:
      - app
    deploy:
      restart_policy:
        condition: on-failure

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
  app_logs:
