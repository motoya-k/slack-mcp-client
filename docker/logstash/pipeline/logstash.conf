input {
  file {
    path => "/logs/app.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["application"]
    type => "application"
  }
  file {
    path => "/logs/audit.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["audit"]
    type => "audit"
  }
}

filter {
  if [type] == "application" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{DATA:logger_name} - %{LOGLEVEL:log_level} - %{GREEDYDATA:log_message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    mutate {
      remove_field => [ "timestamp" ]
    }
  }
  
  if [type] == "audit" {
    json {
      source => "message"
      target => "audit_data"
    }
    
    if "_jsonparsefailure" in [tags] {
      # JSONパースに失敗した場合は、生のメッセージを保持
      mutate {
        remove_tag => [ "_jsonparsefailure" ]
      }
    } else {
      # JSONパースに成功した場合は、フィールドを展開
      ruby {
        code => '
          audit_data = event.get("audit_data")
          if audit_data.is_a?(Hash)
            audit_data.each do |k, v|
              event.set(k, v)
            end
          end
        '
      }
      
      mutate {
        remove_field => [ "audit_data" ]
      }
      
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }
  }
  
  # 共通フィールドの追加
  mutate {
    add_field => {
      "application" => "slack-mcp-client"
      "environment" => "${ENVIRONMENT:development}"
    }
  }
}

output {
  # 開発環境ではコンソールに出力
  if "${ENVIRONMENT:development}" == "development" {
    stdout {
      codec => rubydebug
    }
  }
  
  # Elasticsearchに出力（本番環境用）
  if "${ENVIRONMENT:development}" == "production" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOST:elasticsearch:9200}"]
      index => "slack-mcp-client-%{type}-%{+YYYY.MM.dd}"
      user => "${ELASTICSEARCH_USER:elastic}"
      password => "${ELASTICSEARCH_PASSWORD:changeme}"
    }
  }
  
  # CloudWatchに出力（本番環境用）
  if "${ENVIRONMENT:development}" == "production" {
    cloudwatch {
      region => "${AWS_REGION:ap-northeast-1}"
      log_group_name => "${CLOUDWATCH_LOG_GROUP:/slack-mcp-client}"
      log_stream_name => "${CLOUDWATCH_LOG_STREAM:%{type}-%{+YYYY.MM.dd}}"
    }
  }
}
